// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  App.AnimationWorker = (function() {
    var AnimationWorkerInstance, instance;

    function AnimationWorker() {}

    instance = null;

    AnimationWorkerInstance = (function() {
      function AnimationWorkerInstance() {
        this.terminate = __bind(this.terminate, this);
        this.emptyQueue = __bind(this.emptyQueue, this);
        this.processJobs = __bind(this.processJobs, this);        this.queue = [];
        this.workerTimeoutId = null;
        this.processJobs();
      }

      AnimationWorkerInstance.prototype.eneque = function(job) {
        console.log("Adding job to queue:");
        console.log(job);
        return this.queue.push(job);
      };

      AnimationWorkerInstance.prototype.processJobs = function() {
        console.log("Checking queue");
        if (this.queue.length > 0) {
          console.log("Running job");
          this.queue[0].run();
          this.queue = this.queue.slice(1, this.queue.length);
        }
        return this.workerTimeoutId = setTimeout(this.processJobs, 800);
      };

      AnimationWorkerInstance.prototype.emptyQueue = function() {
        return this.queue = [];
      };

      AnimationWorkerInstance.prototype.terminate = function() {
        this.emptyQueue();
        clearTimeout(this.workerTimeoutId);
        return this.workerTimeoutId = null;
      };

      return AnimationWorkerInstance;

    })();

    AnimationWorker.currentInstance = function() {
      return instance != null ? instance : instance = new AnimationWorkerInstance;
    };

    AnimationWorker.eneque = function(job) {
      console.log("Singleton received job");
      return this.currentInstance().eneque(job);
    };

    AnimationWorker.emptyQueue = function() {
      return this.currentInstance().emptyQueue();
    };

    AnimationWorker.terminate = function() {
      return this.currentInstance().terminate();
    };

    return AnimationWorker;

  }).call(this);

}).call(this);
